# frozen_string_literal: true

module A2A
  # Represents a single, stateful operation or conversation between a client and an agent.
  class Task < ProtocolStruct
    # @return [String] A unique identifier (e.g. UUID) for the task, generated by the server for a new task.
    attribute :id, Types::String

    # @return [String] A server-generated unique identifier (e.g. UUID) for maintaining context across multiple related
    #   tasks or interactions.
    attribute :context_id, Types::String

    # @return [TaskStatus] The current status of the task, including its state and a descriptive message.
    attribute :status, Types::Constructor(TaskStatus)

    # @return [Array<Message>, nil] An array of messages exchanged during the task, representing the conversation
    #   history.
    attribute? :history, Types::Array.of(Types::Constructor(Message)).optional

    # @return [Array<Artifact>, nil] A collection of artifacts generated by the agent during the execution of the task.
    attribute? :artifacts, Types::Array.of(Types::Constructor(Artifact)).optional

    # @return [Hash, nil] Optional metadata for extensions. The key is an extension-specific identifier.
    attribute? :metadata, Types::Hash.optional

    # @return [String] The type of this object, used as a discriminator. Always 'task' for a Task.
    attribute :kind, Types::String.constant('task')
  end
end
