# frozen_string_literal: true

module A2A
  # Represents a single message in the conversation between a user and an agent.
  class Message < ProtocolStruct
    # @return [String] Identifies the sender of the message. `user` for the client, `agent` for the service.
    attribute :role, Types::String.enum('user', 'agent')

    # @return [Array<Part>] An array of content parts that form the message body. A message can be
    #   composed of multiple parts of different types (e.g., text and files).
    attribute :parts, Types::Array.of(Types::Constructor(Part))

    # @return [Hash, nil] Optional metadata for extensions. The key is an extension-specific identifier.
    attribute? :metadata, Types::Hash.optional

    # @return [Array<String>, nil] The URIs of extensions that are relevant to this message.
    attribute? :extensions, Types::Array.of(Types::String).optional

    # @return [Array<String>, nil] A list of other task IDs that this message references for additional context.
    attribute? :reference_task_ids, Types::Array.of(Types::String).optional

    # @return [String] A unique identifier for the message, typically a UUID, generated by the sender.
    attribute :message_id, Types::String

    # @return [String, nil] The ID of the task this message is part of. Can be omitted for the first message of a
    #   new task.
    attribute? :task_id, Types::String.optional

    # @return [String, nil] The context ID for this message, used to group related interactions.
    attribute? :context_id, Types::String.optional

    # @return [String] The type of this object, used as a discriminator. Always 'message' for a Message.
    attribute :kind, Types::String.constant('message')
  end
end
